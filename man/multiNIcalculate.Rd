% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multiNIcalculate.R
\name{multiNIcalculate}
\alias{multiNIcalculate}
\title{Calculate NI index for multiple years}
\usage{
multiNIcalculate(Observations, scaled.bootmat, ...)
}
\arguments{
\item{Observations}{data frame containing named column IndicatorareaID with data on indicator area IDs
corresponding to the sequence of indicator observations in scaled.bootmat.}

\item{scaled.bootmat}{double matrix,    dim = N.omr x nsim,            nsim random draws
of scaled indicator observations or nsim copies of scaled expected values}

\item{...}{Further arguments to be passed to \code{\link{NIcalculate}}}
}
\value{
List of class multiNIresult
}
\description{
Wrapper function that calls NIcalculate multiple times to calculate the index for multiple years in batch
}
\examples{

data(Observations)
data(Indicator.area.ind)
data(Indicator.area)

obs <- data.frame(
  Observations,
  elicitate(
    expected.value=Observations$Expected.value,
    lower=Observations$Lower,
    upper = Observations$Upper)[,1:3])

bootmat <- samplebootmat(
  ValueID=obs$ValueID,
  Value=obs$Expected.value,
  RefobsID = obs$ReferenceYearID,
  DistID=obs$FK_DistID,
  mu=obs$mu,
  sig=obs$sig,
  nsim=10)

scaledBootmat <- scaleobs(
  ValueID=obs$ValueID,
  FK_OmraadeID=obs$IndicatorareaID,
  FK_IndicatorID=obs$IndicatorID,
  FK_RefAarID=obs$ReferenceYearID,
  nsim=10,
  bootmat=bootmat,
  ref.value.code=0,
  IndicatorID=Indic$IndicatorID,
  FK_Scalingmodel=Indic$Scalingmodel)


weightsTrof <- munweights(
  Municipalities=BSunits$Basicunit,
  Indicators=Indic$Indicator_name,
  FK_TrophicgroupID=Indic$TrophicgroupID,
  Key.indicators=Indic$Key.indicators,
  Fidelity=Indic$Fidelity,
  Areaind.Name=Indicator.area.ind$IndicatorareaID,
  Areaind.Indicator=Indicator.area.ind$Indicator_name,
  Area.Name=Indicator.area$IndicatorareaID,
  Area.Municipality=Indicator.area$Basicunit)




tt<-multiNIcalculate(Indicator.area.ind = Indicator.area.ind,
                     Indicator.area = Indicator.area,
                     Observations = Observations,
                     nsim = 10,
                     scaled.bootmat =  scaledBootmat,
                     Weights.trof = weightsTrof)

summary(tt)
}

